/* Mesquite source code.  Copyright 1997 and onward, W. Maddison and D. Maddison. 


 Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. 
 The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.
 Perhaps with your help we can be more than a few, and make Mesquite better.

 Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.
 Mesquite's web site is http://mesquiteproject.org

 This source code and its compiled class files are free and modifiable under the terms of 
 GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)
 */
package mesquite.zephyr.TreeInferenceCoordinator;
/*~~  */

import java.util.*;

import mesquite.lib.*;
import mesquite.zephyr.lib.*;
import mesquite.lib.duties.*;

/* ======================================================================== */
/* this hires handlers, which run the tree inferences.  It is a central manager, not detail-oriented.*/
public class TreeInferenceCoordinator extends FileInit {
	Vector handlers;
	/*.................................................................................................................*/
	public boolean startJob(String arguments, Object condition, boolean hiredByName) {
		if (numModulesAvailable(TreeInferer.class)>0){  //ExternalTreeSearcher
			getFileCoordinator().addSubmenu(MesquiteTrunk.treesMenu, "Tree Inference (Experimental)", makeCommand("inferTrees",  this), TreeInferer.class);
			handlers = new Vector();
			return true;
		}
		return false;
	}
	public Class getHireSubchoice(){  //somewhat nonstandard; this is not to hire a direct employee of this module, but rather to make the submenu and receive the indication as to what inferer the handler is supposed to hire
		return TreeInferer.class;
	}
	/*.................................................................................................................*/
	/** Generated by an employee who quit.  The MesquiteModule should act accordingly. */
	public void employeeQuit(MesquiteModule employee) {
		handlers.removeElement(employee);
	}

	//DW: add new window with side panel that shows what inferences are ongoing, their status, and having buttons to kill.
	//DW: if any inference going then add menu item to kill all inferences
	//DW: where to put autosave? -- best to put burden of choice on inferer's interface, and add method so handler can query inferer as to whether autosave is in effect
	//DW: currently ALWAYS on separate thread; therefore LOCK taxa block to editing?
	/*.................................................................................................................*/
	public Snapshot getSnapshot(MesquiteFile file) { 
		Snapshot temp = new Snapshot();
		if (file == null || file == getProject().getHomeFile()){

			for (int i = 0; i<handlers.size(); i++) {
				MesquiteModule e=(MesquiteModule)handlers.elementAt(i);
				temp.addLine("restoreInference ", e); 
			}
		}
		return temp;
	}
	/*.................................................................................................................*/
	public Object doCommand(String commandName, String arguments, CommandChecker checker) {
		if (checker.compare(this.getClass(), "Hires a tree inferer and infers trees", null, commandName, "inferTrees")) {
			TreeInferenceHandler handler = (TreeInferenceHandler)hireEmployee(TreeInferenceHandler.class, "Tree inference handler");
			if (handler !=null){
				handlers.addElement(handler);
				handler.doCommand("startInference", arguments);  //inferer name passed along to handler
				return handler;
			}
		}
		else if (checker.compare(this.getClass(), "Hires a tree inferer and infers trees", null, commandName, "restoreInference")) {
			TreeInferenceHandler handler = (TreeInferenceHandler)hireNamedEmployee(TreeInferenceHandler.class, arguments);
			if (handler !=null){
				handlers.addElement(handler);
				return handler;
			}
		}
		else
			return  super.doCommand(commandName, arguments, checker);
		return null;
	}


	/*.................................................................................................................*/
	public boolean isPrerelease() { 
		return true;
	}
	/*.................................................................................................................*/
	public String getNameForMenuItem() {
		return "Tree Inference (Experimental)";
	}
	/*.................................................................................................................*/
	public String getName() {
		return "Tree Inference Coordinator";
	}
	/*.................................................................................................................*/
	/** returns the version number at which this module was first released.  If 0, then no version number is claimed.  If a POSITIVE integer
	 * then the number refers to the Mesquite version.  This should be used only by modules part of the core release of Mesquite.
	 * If a NEGATIVE integer, then the number refers to the local version of the package, e.g. a third party package*/
	public int getVersionOfFirstRelease(){
		return 304;  
	}
	/*.................................................................................................................*/
	/** returns an explanation of what the module does.*/
	public String getExplanation() {
		return "Coordinates tree inferers." ;  
	}

}


